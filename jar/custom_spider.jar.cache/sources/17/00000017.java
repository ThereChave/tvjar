package com.github.catvod.spider;

import android.annotation.TargetApi;
import android.content.Context;
import android.text.TextUtils;
import android.util.Base64;
import com.github.catvod.crawler.Spider;
import com.github.catvod.crawler.SpiderDebug;
import com.github.catvod.spider.merge.HV;
import com.github.catvod.spider.merge.Hn;
import com.github.catvod.spider.merge.QL;
import com.github.catvod.spider.merge.Z9;
import com.github.catvod.spider.merge.cK;
import com.github.catvod.spider.merge.elQ;
import com.github.catvod.spider.merge.hh;
import com.github.catvod.spider.merge.s;
import com.github.catvod.spider.merge.uj;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.TreeMap;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import okhttp3.Call;
import okhttp3.Response;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* loaded from: classes.dex */
public class Bdys01 extends Spider {
    private JSONObject iv;
    private String mk = "";
    private String KZ = "";

    protected String KZ(String str, String str2) {
        try {
            Cipher cipher = Cipher.getInstance(elQ.d("310A0A772D39326009132B29471F383C0C131E28"));
            cipher.init(1, new SecretKeySpec(str2.getBytes(), elQ.d("310A0A")));
            return mk(cipher.doFinal(str.getBytes())).toUpperCase();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return null;
        }
    }

    protected HashMap<String, String> YY(String str, String str2) {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put(elQ.d("253C3C2A453B172A372C"), elQ.d("3D202331041611606C76585A5802383B011404202A30535A39212D3D045A3D2E3A782729501779695825417A066F415A313F29340D2D152D12311C55457C6E765B4C506712103C373C6379340111156F1E3D0B111F66791B00081F223C77514B5E7F776C5C4D426168695C5A232E3F391A135F7A6A6F464946"));
        if (!str2.equals(elQ.d("1720363F041F"))) {
            hashMap.put(elQ.d("313A2D300708193B20"), elQ.d("07382E760A1E093C696946191F22"));
            if (str2.length() > 0) {
                hashMap.put(elQ.d("222A3F3D1A1F02"), str2);
            }
            if (this.mk.length() > 0) {
                hashMap.put(elQ.d("33203633011F"), this.mk);
            }
        }
        hashMap.put(elQ.d("312C3A3D180E5D0338360F0F11283C"), elQ.d("0A27741B26560A276229554A5E777522005724186229554A5E787522005738046229554A5E7A753D0657251C6229554A5E7C753D0641017269765A"));
        return hashMap;
    }

    public String categoryContent(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        String str3;
        int i;
        int i2;
        String substring;
        s sVar;
        String d = elQ.d("0B202B3C0D080D");
        String d2 = elQ.d("0B3C24");
        try {
            String d3 = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C363547095F");
            String d4 = elQ.d("4F692D21181F4D");
            String d5 = elQ.d("11");
            if (hashMap != null && hashMap.size() > 0) {
                boolean equals = str.equals(d5);
                String d6 = elQ.d("0B3C2477");
                str3 = equals ? d3 + d6 + str2 + elQ.d("4F69382A0D1B4D34382A0D1B0D69203D09084D34203D09080D69362A0C1F027222371A1E153D24") : d3 + d6 + str2 + d4 + str + elQ.d("562E2B3D09470B2E2B3D090756363C391A470B363C391A0756202B3C0D084D34362A0C1F0232");
                for (String str4 : hashMap.keySet()) {
                    String str5 = hashMap.get(str4);
                    if (str5.length() > 0) {
                        str3 = str3.replace(elQ.d("0B") + str4 + elQ.d("0D"), URLEncoder.encode(str5));
                    }
                }
                for (int i3 = 0; i3 < 4; i3++) {
                    if (str3.contains(d2)) {
                        str3 = str3.replace(d2, elQ.d("112335"));
                    } else if (str3.contains(elQ.d("0B2E2B3D0907"))) {
                        str3 = str3.replace(elQ.d("562E2B3D09470B2E2B3D0907"), "");
                    } else if (str3.contains(elQ.d("0B363C391A07"))) {
                        str3 = str3.replace(elQ.d("56363C391A470B363C391A07"), "");
                    } else if (str3.contains(d)) {
                        str3 = str3.replace(d, elQ.d("40"));
                    }
                }
            } else {
                boolean equals2 = str.equals(d5);
                String d7 = elQ.d("11233577");
                str3 = equals2 ? d3 + d7 + str2 + elQ.d("4F69362A0C1F027269") : d3 + d7 + str2 + d4 + str + elQ.d("56202B3C0D084D7F");
            }
            String d8 = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C363547");
            this.KZ = d8;
            String z2 = uj.z(str3, YY(str3, d8));
            this.KZ = str3;
            Z9 KZ = HV.KZ(z2);
            JSONObject jSONObject = new JSONObject();
            s QM = KZ.QM(elQ.d("116129390F1F5D23303603"));
            int size = QM.size();
            String d9 = elQ.d("4B");
            String d10 = elQ.d("3A1C1C0B3B333F01101C");
            String d11 = elQ.d("183D3C3E");
            if (size == 0) {
                i2 = Integer.parseInt(str2);
                i = i2;
            } else {
                int i4 = 0;
                while (true) {
                    if (i4 >= QM.size()) {
                        break;
                    }
                    hh hhVar = QM.get(i4);
                    if (hhVar.t().equals(elQ.d("95FFE7B1C9CF"))) {
                        String YY = hhVar.YY(d11);
                        boolean contains = YY.contains(d10);
                        String d12 = elQ.d("5F");
                        if (contains) {
                            substring = YY.substring(YY.lastIndexOf(d12) + 1, YY.indexOf(d9));
                        } else {
                            substring = YY.substring(YY.lastIndexOf(d12) + 1, YY.indexOf(elQ.d("4F")));
                        }
                        if (!substring.isEmpty()) {
                            i2 = Integer.parseInt(substring);
                            i = -1;
                        }
                    } else {
                        i4++;
                    }
                }
                i = -1;
                i2 = 0;
            }
            JSONArray jSONArray = new JSONArray();
            if (!z2.contains(elQ.d("96FDF8BEF4F396C6E7BDE0CA96CDF1BEEBC998E9D8BFF2FE97F4CABEF6E695DCFF"))) {
                s QM2 = KZ.QM(elQ.d("14262F760B151C62353F4542"));
                int i5 = 0;
                while (i5 < QM2.size()) {
                    hh hhVar2 = QM2.get(i5);
                    String t = hhVar2.Po(elQ.d("187C77350A5740")).t();
                    String YY2 = hhVar2.Po(elQ.d("19223E761F57417F69")).YY(elQ.d("033D3A"));
                    String t2 = hhVar2.Po(elQ.d("0061343A454A")).t();
                    String YY3 = hhVar2.Po(elQ.d("11613D750A161F2C32")).YY(d11);
                    if (YY3.contains(d10)) {
                        sVar = QM2;
                        YY3 = YY3.substring(0, YY3.indexOf(d9));
                    } else {
                        sVar = QM2;
                    }
                    JSONObject jSONObject2 = new JSONObject();
                    jSONObject2.put(elQ.d("06203D07011E"), YY3);
                    jSONObject2.put(elQ.d("06203D07061B1D2A"), t);
                    jSONObject2.put(elQ.d("06203D07181313"), YY2);
                    jSONObject2.put(elQ.d("06203D071A1F1D2E2B331B"), t2);
                    jSONArray.put(jSONObject2);
                    i5++;
                    QM2 = sVar;
                }
            }
            jSONObject.put(elQ.d("002E3E3D"), i);
            jSONObject.put(elQ.d("002E3E3D0B1505212D"), i2);
            jSONObject.put(elQ.d("1C2634311C"), 48);
            jSONObject.put(elQ.d("04202D3904"), i2 <= 1 ? jSONArray.length() : i2 * 48);
            jSONObject.put(elQ.d("1C262A2C"), jSONArray);
            return jSONObject.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return "";
        }
    }

    public String detailContent(List<String> list) {
        String str;
        hh hhVar;
        String str2;
        String d = elQ.d("546B7D");
        String d2 = elQ.d("97FEE2BDF6F19FF3C3");
        String str3 = "";
        try {
            String str4 = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C3635") + list.get(0);
            Z9 KZ = HV.KZ(uj.z(str4, YY(str4, this.KZ)));
            this.KZ = str4;
            JSONObject jSONObject = new JSONObject();
            JSONObject jSONObject2 = new JSONObject();
            String YY = KZ.Po(elQ.d("14262F760B151C62343C451B053B3678011717")).YY(elQ.d("033D3A"));
            String t = KZ.Po(elQ.d("187E773C45141F213C760C571D2B743A04151324")).t();
            String C = KZ.QM(elQ.d("14262F760B1B022B773B07161C2E292B0D5A4E6F3D311E54132E2B3C45181F2B20")).C();
            String str5 = KZ.QM(elQ.d("033F38364618112B3E3D46181762292D1A0A1C2A74341C")).C().replace(elQ.d("96D4EDBEFECA96D8EFB1FFCE9FF3C3"), "").split(elQ.d("5D"))[0];
            s QM = KZ.QM(elQ.d("14262F760B151C61343A4548")).get(0).QM(elQ.d("00"));
            String str6 = "";
            String str7 = str6;
            String str8 = str7;
            String str9 = str8;
            String str10 = str9;
            int i = 0;
            while (i < QM.size()) {
                hh hhVar2 = QM.get(i);
                String t2 = hhVar2.Po(elQ.d("033B2B37061D")).t();
                boolean equals = t2.equals(d2);
                s sVar = QM;
                String d3 = elQ.d("5C");
                str = str3;
                String d4 = elQ.d("11");
                if (equals) {
                    try {
                        ArrayList arrayList = new ArrayList();
                        s QM2 = hhVar2.QM(d4);
                        for (int i2 = 0; i2 < QM2.size(); i2++) {
                            arrayList.add(QM2.get(i2).t());
                        }
                        str6 = d2 + TextUtils.join(d3, arrayList);
                        str2 = d2;
                    } catch (Exception e) {
                        e = e;
                        SpiderDebug.log(e);
                        return str;
                    }
                } else {
                    str2 = d2;
                    if (t2.contains(elQ.d("95D3E9BDE4C0"))) {
                        str7 = hhVar2.t().substring(hhVar2.t().indexOf(elQ.d("2B")) + 1, hhVar2.t().indexOf(elQ.d("2D")));
                    } else if (t2.contains(elQ.d("98FEDFBFFBD9"))) {
                        str8 = elQ.d("98FEDFBFFBD94A") + hhVar2.t();
                    } else if (t2.contains(elQ.d("95E0E5BED4EE9FF3C3"))) {
                        str10 = hhVar2.Po(d4).t();
                    } else if (t2.contains(elQ.d("94F7E2BED4EE9FF3C3"))) {
                        ArrayList arrayList2 = new ArrayList();
                        s QM3 = hhVar2.QM(d4);
                        for (int i3 = 0; i3 < QM3.size(); i3++) {
                            arrayList2.add(QM3.get(i3).t());
                        }
                        str9 = TextUtils.join(d3, arrayList2);
                    }
                }
                i++;
                d2 = str2;
                QM = sVar;
                str3 = str;
            }
            str = str3;
            jSONObject2.put(elQ.d("06203D07011E"), list.get(0));
            jSONObject2.put(elQ.d("06203D07061B1D2A"), t);
            jSONObject2.put(elQ.d("06203D07181313"), YY);
            jSONObject2.put(elQ.d("0436293D371411223C"), str6);
            jSONObject2.put(elQ.d("06203D07111F113D"), str5);
            jSONObject2.put(elQ.d("06203D070908152E"), str7);
            jSONObject2.put(elQ.d("06203D071A1F1D2E2B331B"), str8);
            jSONObject2.put(elQ.d("06203D07091904202B"), str9);
            jSONObject2.put(elQ.d("06203D070C13022A3A2C0708"), str10);
            jSONObject2.put(elQ.d("06203D070B151E3B3C361C"), C);
            TreeMap treeMap = new TreeMap();
            s QM4 = KZ.QM(elQ.d("11613B2C0654123B37751B0B052E2B3D"));
            String d5 = elQ.d("96DDF4BEFCC495C7CEB0C9D2");
            ArrayList arrayList3 = new ArrayList();
            for (int i4 = 0; i4 < QM4.size(); i4++) {
                String YY2 = QM4.get(i4).YY(elQ.d("183D3C3E"));
                if (YY2.contains(elQ.d("3A1C1C0B3B333F01101C"))) {
                    YY2 = YY2.substring(0, YY2.indexOf(elQ.d("4B")));
                }
                arrayList3.add(hhVar.t() + elQ.d("54") + YY2);
            }
            treeMap.put(d5, arrayList3.size() > 0 ? TextUtils.join(elQ.d("53"), arrayList3) : str);
            if (treeMap.size() > 0) {
                String join = TextUtils.join(d, treeMap.keySet());
                String join2 = TextUtils.join(d, treeMap.values());
                jSONObject2.put(elQ.d("06203D0718161136063E1A151D"), join);
                jSONObject2.put(elQ.d("06203D0718161136062D1A16"), join2);
            }
            JSONArray jSONArray = new JSONArray();
            jSONArray.put(jSONObject2);
            jSONObject.put(elQ.d("1C262A2C"), jSONArray);
            return jSONObject.toString();
        } catch (Exception e2) {
            e = e2;
            str = str3;
        }
    }

    public String homeContent(boolean z) {
        String d = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C3635");
        try {
            Z9 KZ = HV.KZ(uj.z(d, YY(d, this.KZ)));
            this.KZ = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C363547");
            JSONObject jSONObject = new JSONObject();
            JSONArray jSONArray = new JSONArray();
            JSONObject jSONObject2 = new JSONObject(elQ.d("0B6DBCDDC093F3E77B624858116D757A8FEEC5AAE4E94A40506D697A445897DBECB0CFFC95C6FE7A525A527E7B25"));
            Iterator<String> keys = jSONObject2.keys();
            while (keys.hasNext()) {
                JSONObject jSONObject3 = new JSONObject();
                String next = keys.next();
                jSONObject3.put(elQ.d("0436293D371411223C"), next);
                jSONObject3.put(elQ.d("0436293D371314"), jSONObject2.getString(next));
                jSONArray.put(jSONObject3);
            }
            jSONObject.put(elQ.d("1323382B1B"), jSONArray);
            if (z) {
                jSONObject.put(elQ.d("1626352C0D0803"), this.iv);
            }
            try {
                s QM = KZ.QM(elQ.d("14262F761A1507612B371F57132E2B3C1B"));
                s QM2 = QM.get(0).QM(elQ.d("14262F760B151C626D761A15073C74350C5747"));
                JSONArray jSONArray2 = new JSONArray();
                for (int i = 0; i < QM2.size(); i++) {
                    hh hhVar = QM2.get(i);
                    String t = hhVar.Po(elQ.d("187C773B090814622D311C1615")).t();
                    String YY = hhVar.Po(elQ.d("19223E761F57417F69")).YY(elQ.d("142E2D394509022C"));
                    String t2 = hhVar.Po(elQ.d("00612D3D100E5D222C2C0D1E")).t();
                    String YY2 = hhVar.Po(elQ.d("11613D750A161F2C32760B15062A2B")).YY(elQ.d("183D3C3E"));
                    JSONObject jSONObject4 = new JSONObject();
                    jSONObject4.put(elQ.d("06203D07011E"), YY2);
                    jSONObject4.put(elQ.d("06203D07061B1D2A"), t);
                    jSONObject4.put(elQ.d("06203D07181313"), YY);
                    jSONObject4.put(elQ.d("06203D071A1F1D2E2B331B"), t2);
                    jSONArray2.put(jSONObject4);
                }
                jSONObject.put(elQ.d("1C262A2C"), jSONArray2);
            } catch (Exception e) {
                SpiderDebug.log(e);
            }
            iv();
            return jSONObject.toString();
        } catch (Exception e2) {
            SpiderDebug.log(e2);
            return "";
        }
    }

    public void init(Context context) {
        super.init(context);
        try {
            this.iv = new JSONObject(elQ.d
        } catch (JSONException e) {
            SpiderDebug.log(e);
        }
    }

    protected String iv() {
        this.mk = "";
        HashMap hashMap = new HashMap();
        String str = this.KZ;
        String d = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C363547000A352322");
        uj.Dp(d, YY(d, str), hashMap);
        String d2 = elQ.d("032A2D750B151F24303D");
        if (hashMap.containsKey(d2)) {
            this.mk = ((String) ((List) hashMap.get(d2)).get(0)).split(elQ.d("4B"))[0];
        }
        return this.mk;
    }

    protected HashMap<String, String> l(String str) {
        HashMap<String, String> hashMap = new HashMap<>();
        String str2 = str.replace(elQ.d("183B2D281B405F60"), "").split(elQ.d("5F"))[0];
        hashMap.put(elQ.d("253C3C2A453B172A372C"), elQ.d("3D202331041611606C76585A5802383B011404202A30535A39212D3D045A3D2E3A782729501779695825417A066F415A313F29340D2D152D12311C55457C6E765B4C506712103C373C6379340111156F1E3D0B111F66791B00081F223C77514B5E7F776C5C4D426168695C5A232E3F391A135F7A6A6F464946"));
        hashMap.put(elQ.d("313A2D300708193B20"), str2);
        hashMap.put(elQ.d("3F3D303F0114"), elQ.d("07382E760A1E093C696946191F22"));
        hashMap.put(elQ.d("312C3A3D180E5D0338360F0F11283C"), elQ.d("0A27741B26560A276229554A5E777522005724186229554A5E787522005738046229554A5E7A753D0657251C6229554A5E7C753D0641017269765A"));
        return hashMap;
    }

    protected String mk(byte[] bArr) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bArr) {
            String hexString = Integer.toHexString(b & 255);
            if (hexString.length() == 1) {
                hexString = '0' + hexString;
            }
            sb.append(hexString);
        }
        return sb.toString();
    }

    @TargetApi(19)
    public String playerContent(String str, String str2, List<String> list) {
        String str3;
        String str4;
        String d = elQ.d("7A");
        String d2 = elQ.d("1D7C2C603748");
        String d3 = elQ.d("1D7C2C60");
        String d4 = elQ.d("053D356B");
        String d5 = elQ.d("5D");
        String d6 = elQ.d("062E2B781813146F64");
        try {
            String str5 = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C3635") + str2;
            s QM = HV.KZ(uj.z(str5, YY(str5, this.KZ))).QM(elQ.d("032C2B31180E"));
            JSONObject jSONObject = new JSONObject();
            int i = 0;
            while (true) {
                if (i >= QM.size()) {
                    str3 = "";
                    break;
                }
                String oc = QM.get(i).toString();
                if (oc.contains(d6)) {
                    String substring = oc.substring(oc.indexOf(d6), oc.lastIndexOf(elQ.d("062E2B781C131D2A")) + 1);
                    str3 = substring.substring(substring.indexOf(elQ.d("4D")) + 2, substring.lastIndexOf(elQ.d("4B")));
                    break;
                }
                i++;
            }
            long currentTimeMillis = System.currentTimeMillis();
            String str6 = elQ.d("183B2D281B405F602E2F1F54122B202B58495E2C3635471619213C2B570E4D") + currentTimeMillis + elQ.d("563C3E65") + KZ(str3 + d5 + currentTimeMillis, QL.mk(str3 + d5 + currentTimeMillis, StandardCharsets.UTF_8).substring(0, 16)) + elQ.d("563F303C55") + str3;
            JSONObject jSONObject2 = new JSONObject(uj.z(str6, YY(str6, ""))).getJSONObject(elQ.d("142E2D39"));
            ArrayList arrayList = new ArrayList();
            if (!jSONObject2.isNull(d4)) {
                arrayList.add(jSONObject2.optString(d4));
            }
            boolean isNull = jSONObject2.isNull(d3);
            String d7 = elQ.d("07382E760A1E093C696946191F22");
            String d8 = elQ.d("07382E760A1E157B773B0B");
            if (!isNull) {
                arrayList.add(jSONObject2.optString(d3).replace(d8, d7));
            }
            if (!jSONObject2.isNull(d2)) {
                for (String str7 : jSONObject2.optString(d2).split(elQ.d("5C"))) {
                    arrayList.add(str7.replace(d8, d7));
                }
            }
            String str8 = (String) arrayList.get(new Random().nextInt(arrayList.size()));
            boolean contains = str8.contains(elQ.d("1D3F6D"));
            String d9 = elQ.d("182A383C0D08");
            String d10 = elQ.d("053D35");
            String d11 = elQ.d("002338213D081C");
            String d12 = elQ.d("002E2B2B0D");
            if (contains) {
                jSONObject.put(d12, 0);
                jSONObject.put(d11, "");
                jSONObject.put(d10, str8);
                jSONObject.put(d9, "");
                return jSONObject.toString();
            }
            HashMap hashMap = new HashMap();
            uj.Dp(str8, YY(str8, ""), hashMap);
            String l = uj.l(hashMap);
            cK.Ve ve = new cK.Ve() { // from class: com.github.catvod.spider.Bdys01.1
                @Override // com.github.catvod.spider.merge.cK
                protected void onFailure(Call call, Exception exc) {
                }

                /* JADX INFO: Access modifiers changed from: protected */
                @Override // com.github.catvod.spider.merge.cK
                public void onResponse(Response response) {
                }
            };
            uj.YY(uj.iv(), l, null, l(l), ve);
            int code = ve.getResult().code();
            String d13 = elQ.d("183B2D281B405F602F370C54122B202B46171560");
            if (code == 200) {
                InputStream byteStream = ve.getResult().body().byteStream();
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                int i2 = 4;
                byte[] bArr = new byte[4];
                while (true) {
                    int read = byteStream.read(bArr, 0, i2);
                    if (read == -1) {
                        break;
                    }
                    byteArrayOutputStream.write(bArr, 0, read);
                    i2 = 4;
                }
                byteArrayOutputStream.flush();
                byte[] byteArray = byteArrayOutputStream.toByteArray();
                byteStream.close();
                String[] split = Hn.mk(Arrays.copyOfRange(byteArray, 3354, byteArray.length)).split(d);
                for (int i3 = 0; i3 < split.length; i3++) {
                    String str9 = split[i3];
                    if (str9.contains(elQ.d("5E3B2A"))) {
                        split[i3] = d13 + str9;
                    }
                }
                str4 = TextUtils.join(d, split);
            } else {
                str4 = "";
            }
            jSONObject.put(d10, elQ.d("142E2D39521B003F35310B1B04263636470C1E2B7739180A1C2A7735181F173A2B345318113C3C6E5C56") + Base64.encodeToString(str4.getBytes(), 2));
            jSONObject.put(d12, 0);
            jSONObject.put(d11, "");
            jSONObject.put(d9, new JSONObject(l(d13)).toString());
            return jSONObject.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return "";
        }
    }

    public String searchContent(String str, boolean z) {
        try {
            String str2 = elQ.d("183B2D281B405F603A36461819213E760B151D602A3D0908132766295509193B3C7D5B3B07382E760A1E093C696B46191F2272") + URLEncoder.encode(str);
            Z9 KZ = HV.KZ(uj.z(str2, YY(str2, elQ.d("1226373F"))));
            JSONObject jSONObject = new JSONObject();
            JSONArray jSONArray = new JSONArray();
            s QM = KZ.QM(elQ.d("1C26773A371B1C2836780048502E"));
            if (QM.size() > 0) {
                for (int i = 0; i < QM.size(); i++) {
                    hh hhVar = QM.get(i);
                    String t = hhVar.t();
                    String YY = hhVar.YY(elQ.d("183D3C3E"));
                    if (!YY.contains(elQ.d("5F3C76")) && !YY.contains(elQ.d("00233821")) && !YY.contains(elQ.d("002A2B3E07081D2A2B")) && !YY.contains(elQ.d("032A382A0B12")) && !YY.contains(elQ.d("1A3C3C2B1B131F21303C")) && t.contains(str)) {
                        Z9 KZ2 = HV.KZ(uj.z(YY, YY(YY, this.KZ)));
                        JSONObject jSONObject2 = new JSONObject();
                        String YY2 = KZ2.Po(elQ.d("14262F760B151C62343C451B053B3678011717")).YY(elQ.d("033D3A"));
                        String t2 = KZ2.Po(elQ.d("187D773C45091D623B3407191B613D75051E5D2136360D")).t();
                        String replace = YY.replace(elQ.d("183B2D281B405F602E2F1F54122B202B584B5E2C3635"), "");
                        jSONObject2.put(elQ.d("06203D07061B1D2A"), t2);
                        jSONObject2.put(elQ.d("06203D071A1F1D2E2B331B"), "");
                        jSONObject2.put(elQ.d("06203D07011E"), replace);
                        jSONObject2.put(elQ.d("06203D07181313"), YY2);
                        jSONArray.put(jSONObject2);
                    }
                }
                jSONObject.put(elQ.d("1C262A2C"), jSONArray);
                return jSONObject.toString();
            }
        } catch (Exception e) {
            SpiderDebug.log(e);
        }
        return "";
    }
}